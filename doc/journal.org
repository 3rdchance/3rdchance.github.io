* 2025 - 05
1. data type equality
Structural equality VS  Referential equality
stricted equal === vs equal in javacripts

2. float compare
In comparison operations, positive infinity is larger than all values except itself and NaN,
and negative infinity is smaller than all values except itself and NaN.
NaN is unordered: it is not equal to, greater than, or less than anything, including itself. x == x is false if the value of x is NaN. You can use this to test whether a value is NaN or not, but the recommended way to test for NaN is with the isnan function (see Floating-Point Number Classification Functions). In addition, <, >, <=, and >= will raise an exception when applied to NaNs.



- bash special parameters
- trailing command in python tuple definition
  
* Datasheet
- emacs
M-x delete-trailing-whitespace


- elisp
M-. xref-find-definitions
M-C-\(indent region)
C-u universal argument
C-x z (repeat) - repeat command

C-h k (key -> command)


* Diary
** 2025-05-20
|       date | point | Good                   | Need Change      |
| 2025-05-19 |    90 | excercise + no smoking | can focus 1 hour |
|            |       |                        |                  |
|------------+-------+------------------------+------------------|
|            |       |                        |                  |



*** memory order
On x86, there is only one coherency domain. Stores become visible to all other cores at exactly the same time, when they commit to L1d cache.
- transitivity

WRC - write-to-read causality

- cumulativity
the barrier ensures that any write that has propagated to Thread 1 before the barrier is propagated to any other thread before the Thread 1 writes after the barrier can propagate to that other thread. This
cumulative property is essential for iterated message-passing examples.

  - ref: A Tutorial Introduction to the ARM and POWER Relaxed Memory Models
*** linux kernel memory: cache optimization && tlb
todo1: how cache optimization, and how test it?

*** assembly - arch1001 class
todo
1. Floating point/vector instructions/hardware
2. Instruction pipeline, alternate modes of operation, hardware virtualization, etc


* 2025 -0521 (10:10)
assembly: RAX -> R0, RCX -> R1, RDX -> R2, RBX -> R3, RSP -> R4, RBP -> R5, RSI -> R6, RDI -> R7
- Depositary receipt
- Plucky Puffin

- 0522 (09:43)
C-h f (describe-function)


(defun multiply-by-seven (number)       ; Interactive version.
  "Multiply NUMBER by seven."
  (interactive "p")
  (message "The result is %d" (* 7 number)))
  result is %d" (* 7 number)))


- linux kernel memory model vs c11
  Paul E. McKenney, Ulrich Weigand, Andrea Parri, and Boqun Feng. Linux kernel memory model, September 2018. http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0124r6.html.  
- The kernel concurrency sanitizer (KCSAN) [EMV+20a, EMV+20b], based in part on RacerD [BGOS18]
     Concurrency bugs should fear the big bad data-race detector (part 1) (part2)

- r/mX
  1. rbx
  2. [rbx]
  3. base+index*scale -> [rbx+rcx*X]
  4. base+index*scale+displacement -> [rbx+rcx*X+Y]


- assembly syntax
  intel syntax: mov dst src -   Think algebra or C: y = 2x + 1 
  at&t syntax: mov src dst  -     1 + 2 = 3

* 2025-523

dynamic binding vs lexical binding
;;; -*- lexical-binding: t -*-


