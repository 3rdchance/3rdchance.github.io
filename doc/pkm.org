* Org
** Question to review
1. are you more health ?
2. are you more amibitious ?
3. What are your target ?

** MindMap && RoadMap
1. sort all my data in pc
2. sort all my emails - 163, gmail ...






** are my pc and laptop is cleaned ?


** How to Change and GTD - Get things done
1. write the note of what is gtd
2. the process of master a skill
3. record status of everyday, for analysis
myquestion: lack of energy, often tired
* Ideas && Reading
1. can raft / paxos .. consensus algorithm include cache management ?

- Reminiscences of a Stock Operator

* Hackers
pwn
** MindMap && RoadMap
- PGO
** KHO project start

- pathview
  https://patchew.org/linux/20250509074635.3187114-1-changyuanl@google.com/
- repos
https://github.com/googleprodkernel/linux-liveupdate.git

- refs
1. pkernfs: Persisting guest memory and kernel/device state safely across kexec
     https://lpc.events/event/17/contributions/1485/

** Patch1 memblock: add MEMBLOCK_RSRV_KERN flag
1. memblock design and usage
   need operation:  merge, reallocate memory, split

** linux kernel repos and develope road - make to notes
0. repos (trees)
https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/
https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git/
https://git.kernel.org/cgit/linux/kernel/git/next/linux-next.git

- linux memory maintainer Andrew Morton

git://git.kernel.org/pub/scm/linux/kernel/git/akpm/mm

https://git.kernel.org/pub/scm/linux/kernel/git/akpm/mm.git


1. developement flow
- Why does the Linux kernel repository have only one branch
There is no need in a bunch of branches for mainline kernel, as development process in this tree never stops, and once new version is released, there won't be any back-porting to that version (inside mainline tree). So Linus sticks to tags (instead of branches) in this case.
- why next tree (integration-tests)
  Before updates from subsystem trees are merged into the mainline 4.x tree, they need to be integration-tested. For this purpose, a special testing repository exists into which virtually all subsystem trees are pulled on an almost daily basis:



* DataSheet
* ---------------------------------------- BEFORE ------------------------------------------------------

TASK_KILLABLE ?


static_assert, assert


https://wiki.sei.cmu.edu/confluence/display/c/INT32-C.+Ensure+that+operations+on+signed+integers+do+not+result+in+overflow
INT15-C. Use intmax_t or uintmax_t for formatted IO on programmer-defined integer types





- 2024 京东零售技术年度总结
http://xingyun.jd.com/shendeng/article/detail/42253

- emacs org-mode link titles
- sb2nb

- gdb
  https://apps.p.ost2.fyi/learning/course/course-v1:OpenSecurityTraining2+Dbg1012_IntroGDB+2024_v1/block-v1:OpenSecurityTraining2+Dbg1012_IntroGDB+2024_v1+type@sequential+block@db4e8d0f908e4babb7eee091adc83008/block-v1:OpenSecurityTraining2+Dbg1012_IntroGDB+2024_v1+type@vertical+block@ba7def14637d4933b5c2fe0e740ab93f

- OpenSecurityTraining2 Arch1001 Architecture 1001: x86-64 Assembly
- 咱就把0-1背包问题讲个通透！
  https://zhuanlan.zhihu.com/p/345364527
  https://programmercarl.com/%E8%83%8C%E5%8C%85%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%8001%E8%83%8C%E5%8C%85-1.html


** cs191 practice
differentiation and stochastic gradient descent (SGD) to optimize a loss function
derivative - 导数
gradient - 斜率

? stochastic gradient descent (SGD)
GradientTape
** merge -> thrift
** kotlin
** sort joural.org


* RoadMap
- long target, short target, short


1. 动态规划背包问题
2. s191, tensorflow guide
3. kho (kexec handle over) (linux insides- booting and initialize)
   https://patchew.org/linux/20250509074635.3187114-1-changyuanl@google.com/20250509074635.3187114-2-changyuanl@google.com/
4. coding
5. life


|       | gain |
|-------+------|
| Habit |      |
|       |      |
* GTD - Get things done
harness

Stores get committed when they leave the SB (they are committed to L1 or memory).

exclusive-or


exchange-point-and-mark C-x C-x
pop-global-mark C-x C-@, C-x C-SPC
C-u C-<SPC>’ twice


C-u C-h i - open info doc





* memory model
The Armv8 architecture defines memory barriers that provide a range of functionality, including:

1. Ordering of load and store instructions
2. Completion of load and store instructions
3. Context synchronization
4. Restrictions on speculation



Processor Element (PE)
Shareability domain


- DMB
A DMB does not prevent future explicit data reads from being speculatively executed. If a read is speculatively executed, the core must discard the speculative data from the register. The core must also re-execute the load after all previous explicit data accesses are observed.
- DSB:  Data Synchronization Barrier

- question: memory model transitivity
** todos
1. The kernel concurrency sanitizer (KCSAN) [EMV+20a, EMV+20b], based in part on RacerD [BGOS18] and implementing LKMM, has also been added to the Linux kernel and is now heavily used.


* CODING - algorithm, system, style
** Algorithm: B-tree/Redblacktree, Knapsack problem, NP problem
** Style: elisp, lsp, makefile, cmake, coding style, testing
	https://make.mad-scientist.net/papers/advanced-auto-dependency-generation/
** Other: merge -> thrift -> io_uring -> time -> random ->
	time_t cftime = chrono::system_clock::to_time_t(timeEntry);
	cout << std::asctime(std::localtime(&cftime));

+ random select algorithm
https://juejin.cn/post/6844904096013484040
https://www.keithschwarz.com/darts-dice-coins/
** App: Kotlin, effective c++, pthon

** TODO merge tools
- getopt

* HACKERS
linux and hacking {pwn, ulk, perf book}
OS && SECURITY
** Kernel: Memory -> Locks
** Hacker: pwn
** New Feature study


** TODO KHO - Google Posts New Version Of Live Update Orchestrator For Speedy Kernel Updates In Production Environments
https://lore.kernel.org/lkml/20250515182322.117840-1-pasha.tatashin@soleen.com/
LUO: "Live Update Orchestrator
KHO: Kexec Handover
** TODO pwn.clollege: program interaction2: Binary files
*** TODO https://intezer.com/blog/executable-linkable-format-101-part-4-dynamic-linking/

** TODO Linux Kernel Memory
*** TODO Memory: Memory Order


** uintptr_t and intmax_t
- Navigating Memory in C++: A Guide to Using std::unitptr_t for Addressing Handling
- INT36-C.Converting a pointer to interger or integer to pointer

** review and keep note of this git repo
https://github.com/FabioBaroni/awesome-exploit-development
https://read.seas.harvard.edu/cs1610/2025/schedule/

* FREE - DeepLearning，App
- Have free career or my company
- Free Career Research : idol research && free career
- App:
- DeepLeaning :s191's practice
    https://jalammar.github.io/illustrated-transformer/
** TODO Deep Learning practice 1
** schedule kotlin developement



* LIFE
1. buy some zcash - clear my zcash files in my disk

** set zotero, when byebye from this dog-company
https://zotero-chinese.com/user-guide/sync




** 618 mobile
手机类，有 2000-150   plus 券
个别还另有-100 券

红米turbo4pro  12+256 ， 原价1999叠加国补1699，昨天实际1483
iqooZ10turbopro  -> 1351
红米k80 类似


个别手机 16+512 的比 12+256 的贵 500+ ，价差仍然有点大。

** Effective cpp printed
[67 - 76] - 80]
         item8]


** Home
- copy s191 class's staff in mac
- Clean Mac
- add perfbook github to newpkm repo
	https://www.kernel.org/pub/linux/kernel/people/paulmck/perfbook/perfbook.html
	git repo https://github.com/paulmckrcu/perfbook.git

- add deep learning flower book to newpkm repo
https://github.com/janishar/mit-deep-learning-book-pdf?tab=readme-ov-file
https://www.deeplearningbook.org

* tmp notes
1.even on 64-bit x86, you can only push 32-bit immediates
changing 32-bit partials (e.g., by loading from memory) zeroes out the whole 64-register

2. Address calculation has limits.
reg+reg\*(2 or 4 or 8)+value is as good as it gets.

3. syscall rdi, rsi, rdx, r10, r8, r9

calling convention
Linux amd64: rdi, rsi, rdx, rcx, r8, r9, return value in rax
Linux arm: r0, r1, r2, r3, return value in r0

- callee-saved
(the function you call keeps their values safe on the stack).
rbx, rbp, r12, r13, r14, r15


* Mindmap && Tmp ideas
** NewIdeas
- self learning progress record  word list (for review)
- Raft && Cache System
  can redis as a raft member ?
** linux kernel : put_user use generic
https://github.com/JacksonAllan/CC/blob/main/articles/Better_C_Generics_Part_1_The_Extendible_Generic.md
https://dev.to/pauljlucas/generic-in-c-i48
